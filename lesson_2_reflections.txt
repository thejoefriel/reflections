What happens when you initialise a repository? Why do you need to do it?

When you initialise a repository it adds a .git folder/file to your folder. This will then enable you to commit changes to files within that folder from that point on. 

Note: it does not do any commits straight away. You have to choose which files to commit and so on. This is so you can choose which files. 



How is the staging area different from the working directory and the repository?
What value do you think it offers?

The staging area is the middle ground between the working directory and the repository. It enables you to choose which files to begin tracking through the repository.



How can you use the staging area to make sure you have one commit per logical
change?

You can choose which file to add to the staging area using GIT ADD. This means if you’ve made changes to multiple files but actually only want to commit one as it’s the only one for that specific logical change you wish to note, then you can ensure you only commit that file. 



What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

If you’re adding a different version of your project (e.g. an Italian version) or you want to create an experimental version



How do the diagrams help you visualize the branch structure?

They let you understand which commits belong with which branches, so you know when changes have diverged (e.g. a bug fix on one branch will not fix the bug on the other if the branches were committed before). 
Also, they let you fully understand which commits might be unreachable 



What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?



What are the pros and cons of Git's automatic merging vs. always doing merges
manually?